/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.egym.recruiting.codingtask.api;

import com.egym.recruiting.codingtask.dto.ExerciseDTO;
import com.egym.recruiting.codingtask.model.Exercise;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;

@Validated
@Api(value = "exercise")
public interface ExerciseApi {

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

	default ResponseEntity<Exercise> insert(final ExerciseDTO exercise) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	default ResponseEntity<Exercise> update(final Long exerciseId, final ExerciseDTO exercise) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@ApiOperation(value = "Insert a new exercise for a user.", nickname = "insertExercise", notes = "Persist a new exercise and generate its id.", response = Exercise.class, tags = {})
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Exercise created", response = Exercise.class) })
	@PostMapping(value = "/exercise", produces = { "application/json" }, consumes = { "application/json" })
	default ResponseEntity<Exercise> insertExercise(
			@ApiParam(value = "", required = true) @Valid @RequestBody final ExerciseDTO exercise) {
		return insert(exercise);
	}

	@ApiOperation(value = "Update an existing exercise for a user.", nickname = "updateExercise", notes = "Update an already persisted exercise. Exercise id, user id and exercise type are excluded from the update.", response = Exercise.class, tags = {})
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Exercise updated", response = Exercise.class) })
	@PutMapping(value = "/exercise/{exerciseId}", produces = { "application/json" }, consumes = { "application/json" })
	default ResponseEntity<Exercise> updateExercise(
			@ApiParam(value = "Id of the exercise to update", required = true) @PathVariable("exerciseId") final Long exerciseId,
			@ApiParam(value = "", required = true) @Valid @RequestBody final ExerciseDTO exercise) {
		return update(exerciseId, exercise);
	}

}
